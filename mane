local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/deividcomsono/Obsidian/refs/heads/main/Library.lua"))()

local Window = Library:CreateWindow({
    Title = "Ink Game",
    Footer = "v2.9.3 - BETA",
    ToggleKeybind = Enum.KeyCode.RightControl,
    Center = true,
    AutoShow = true
})

local PlayerTab = Window:AddTab("Player", "user")
local ExploitsTab = Window:AddTab("Exploits", "zap")

local PlayerGroup = PlayerTab:AddLeftGroupbox("Player Movement", "sliders")
local MiscGroup = PlayerTab:AddRightGroupbox("Misc Features", "settings")
local ExploitsGroup = ExploitsTab:AddLeftGroupbox("Game Exploits", "zap")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer

L

PlayerGroup:AddSlider("FOV", {
    Text = "Field of View",
    Min = 50,
    Max = 120,
    Default = fov,
    Callback = function(val)
        fov = val
    end
})

RunService.Heartbeat:Connect(function()
    local character = localPlayer.Character
    if character then
        local hum = character:FindFirstChildOfClass("Humanoid")
        if hum then
            if hum.WalkSpeed ~= walkSpeed then
                hum.WalkSpeed = walkSpeed
            end
            if hum.JumpPower ~= jumpPower then
                hum.JumpPower = jumpPower
            end
        end
    end
    
    local camera = workspace.CurrentCamera
    if camera and camera.FieldOfView ~= fov then
        camera.FieldOfView = fov
    end
end)
local shiftConn

MiscGroup:AddToggle("ShiftLock", {
    Text = "Shift Lock",
    Default = false,
    Callback = function(state)
        if state then
            shiftConn = RunService.RenderStepped:Connect(function()
                local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                local hrp = character:FindFirstChild("HumanoidRootPart")
                if not hrp then return end

                local cam = workspace.CurrentCamera
                local shiftCam = cam:FindFirstChildWhichIsA("ShiftLockController")
                local lookVector = (shiftCam or cam).CFrame.LookVector
                local flatLook = Vector3.new(lookVector.X, 0, lookVector.Z)

                if flatLook.Magnitude > 0 then
                    hrp.CFrame = CFrame.new(hrp.Position, hrp.Position + flatLook.Unit)
                end
            end)
        else
            if shiftConn then
                shiftConn:Disconnect()
                shiftConn = nil
            end
        end
    end,
})


local infJumpConn
MiscGroup:AddToggle("InfiniteJump", {
    Text = "Infinite Jump",
    Default = false,
    Callback = function(state)
        if state then
            _G.infJump = true
            infJumpConn = game:GetService("UserInputService").JumpRequest:Connect(function()
                if _G.infJump then
                    local hum = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if hum then hum:ChangeState("Jumping") end
                end
            end)
        else
            _G.infJump = false
            if infJumpConn then
                infJumpConn:Disconnect()
                infJumpConn = nil
            end
        end
    end
})

-- === Exploit Buttons ===
ExploitsGroup:AddButton({
    Text = "Skip Red Light Green Light",
    Func = function()
        game.Players.LocalPlayer.Character:PivotTo(CFrame.new(-130, 530, -1500))
    end
})
ExploitsGroup:AddButton({
    Text = "PHANTOM STEP",
    Func = function()
       game.Players.LocalPlayer:SetAttribute("_EquippedPower", "PHANTOM STEP")
    end
})

ExploitsGroup:AddButton({
    Text = "TRICKSTER",
    Func = function()
       game.Players.LocalPlayer:SetAttribute("_EquippedPower", "TRICKSTER")
    end
})

ExploitsGroup:AddButton({
    Text = "MEDIC",
    Func = function()
       game.Players.LocalPlayer:SetAttribute("_EquippedPower", "MEDIC")
    end
})

ExploitsGroup:AddButton({
    Text = "LIGHTNING GOD",
    Func = function()
       game.Players.LocalPlayer:SetAttribute("_EquippedPower", "LIGHTNING GOD")
    end
})
ExploitsGroup:AddButton({
    Text = "Skip Glass Game",
    Func = function()
        game.Players.LocalPlayer.Character:PivotTo(CFrame.new(-212.0, 521.0, -1534.9))
    end
})

-- === Expand Guards Hitbox ===
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local liveFolder = workspace:FindFirstChild("Live")
local guardsExpanded = false
local processedModels = {}
local TARGET_SIZE = Vector3.new(4, 4, 4)

local function isPlayerCharacter(model)
    return Players:FindFirstChild(model.Name) ~= nil
end

local function processModel(model)
    if not model or not model:IsA("Model") then return end
    if isPlayerCharacter(model) then return end
    if processedModels[model] then return end
    local head = model:FindFirstChild("Head")
    if not head or not head:IsA("BasePart") then return end
    if not model:FindFirstChild("_HeadHighlighter") then
        local highlight = Instance.new("Highlight")
        highlight.Name = "_HeadHighlighter"
        highlight.Adornee = model
        highlight.FillColor = Color3.fromRGB(255, 80, 80)
        highlight.OutlineColor = Color3.new(1, 1, 1)
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.Parent = model
    end
    processedModels[model] = head
end

RunService.Heartbeat:Connect(function()
    if not guardsExpanded then return end
    for _, model in ipairs(liveFolder:GetChildren()) do
        processModel(model)
    end
    for model, head in pairs(processedModels) do
        if model and model.Parent and head and head.Parent then
            if head.Size ~= TARGET_SIZE then
                head.Size = TARGET_SIZE
                head.CanCollide = false
            end
        else
            processedModels[model] = nil
        end
    end
end)

ExploitsGroup:AddToggle("ExpandGuardsHitbox", {
    Text = "Expand Guards Hitbox",
    Default = false,
    Callback = function(state)
        guardsExpanded = state
        if not state then
            for model, head in pairs(processedModels) do
                if head and head.Parent then
                    pcall(function()
                        head.Size = Vector3.new(1, 1, 1)
                        head.CanCollide = true
                    end)
                end
                local highlight = model:FindFirstChild("_HeadHighlighter")
                if highlight then highlight:Destroy() end
            end
            processedModels = {}
        end
    end
})

-- === Don't remove any commented lines nigger === --

-- === Tug of War Auto ===
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PerfectQTE = {
    ["PerfectQTE"] = true
}
local autoTugEnabled = false

ExploitsGroup:AddToggle("Tug Of War Auto", {
    Text = "Tug of War Auto Pull",
    Default = false,
    Callback = function(state)
        autoTugEnabled = state
    end
})

RunService.Heartbeat:Connect(function()
    if autoTugEnabled then
        pcall(function()
            ReplicatedStorage.Remotes.TemporaryReachedBindable:FireServer(PerfectQTE)
        end)
    end
end)

-- === Red Light God Mode ===
local RedLightActive = false
local LastSafeCFrame = nil
local LocalPlayer = Players.LocalPlayer

ExploitsGroup:AddToggle("RedLightGodMode", {
    Text = "Red Light God Mode",
    Default = false,
    Callback = function(state) RedLightActive = state end
})

ReplicatedStorage.Remotes.Effects.OnClientEvent:Connect(function(effect)
    if effect.EffectName == "TrafficLight" then
        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if hrp then LastSafeCFrame = hrp.CFrame end
        if not effect.GreenLight and RedLightActive and LastSafeCFrame then
            local mt = getrawmetatable(game)
            local backup = mt.__namecall
            setreadonly(mt, false)
            mt.__namecall = newcclosure(function(self, ...)
                local args = { ... }
                if self.Name == "rootCFrame" and getnamecallmethod() == "FireServer" then
                    args[1] = LastSafeCFrame
                    return backup(self, unpack(args))
                end
                return backup(self, ...)
            end)
            setreadonly(mt, true)
        end
    end
end)

-- === Dalgona Auto ===
ExploitsGroup:AddToggle("DalgonaAuto", {
    Text = "Dalgona Auto Complete",
    Default = false,
    Callback = function(state)
        if not state then return end
        for _, fn in ipairs(getreg()) do
            if typeof(fn) == "function" and islclosure(fn) then
                local info = debug.getinfo(fn)
                if info.name and info.name:lower():find("dalgona") then
                    if debug.getupvalue(fn, 31) then
                        setupvalue(fn, 31, 999999)
                        break
                    end
                end
            end
        end
    end
})

-- === Glass Bridge ESP ===
ExploitsGroup:AddToggle("GlassBridgeESP", {
    Text = "Glass Bridge ESP",
    Default = false,
    Callback = function(state)
        local holder = workspace:FindFirstChild("GlassBridge") and workspace.GlassBridge:FindFirstChild("GlassHolder")
        if not holder then return end
        for _, pair in ipairs(holder:GetChildren()) do
            for _, panel in ipairs(pair:GetChildren()) do
                local glass = panel:FindFirstChild("glasspart")
                if glass then
                    if state then
                        glass.Transparency = 0
                        glass.Material = Enum.Material.Neon
                        if glass:GetAttribute("exploitingisevil") then
                            glass.Color = Color3.fromRGB(248, 87, 87)
                        else
                            glass.Color = Color3.fromRGB(28, 235, 87)
                        end
                    else
                        glass.Transparency = 0.45
                        glass.Material = Enum.Material.SmoothPlastic
                        glass.Color = Color3.fromRGB(106, 106, 106)
                    end
                end
            end
        end
    end
})

-- === Mingle Auto Minigame ===
ExploitsGroup:AddToggle("MingleAuto", {
    Text = "Mingle Auto Minigame Solver",
    Default = false,
    Callback = function(state)
        local function onCharacter(char)
            local function checkRemote(child)
                if child:IsA("RemoteEvent") and child.Name == "RemoteForQTE" then
                    task.spawn(function()
                        while state and child.Parent do
                            child:FireServer()
                            task.wait(0.5)
                        end
                    end)
                end
            end
            char.ChildAdded:Connect(checkRemote)
            for _, v in ipairs(char:GetChildren()) do
                checkRemote(v)
            end
        end
        if Players.LocalPlayer.Character then
            onCharacter(Players.LocalPlayer.Character)
        end
        Players.LocalPlayer.CharacterAdded:Connect(onCharacter)
    end
})
