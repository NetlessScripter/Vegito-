local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local Lighting = game:GetService("Lighting")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local Debris = game:GetService("Debris")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local gui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
gui.Name = "Key System"
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local link = "https://discord.gg/EdmHHmEsEb"
local api = "https://project-mu-silk-77.vercel.app/api/validate"
local soundId = "rbxassetid://2865228021"

local hwid
pcall(function()
	hwid = game:GetService("RbxAnalyticsService"):GetClientId()
end)
hwid = hwid or (gethwid and gethwid()) or (identifyexecutor and identifyexecutor()) or "unknown"

local blur = Instance.new("BlurEffect", Lighting)
blur.Size = 24
blur.Name = "KeyUIBlur"

local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0, 436, 0, 317)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5, 0, 1.2, 0)
frame.BackgroundColor3 = Color3.fromRGB(17, 66, 34)
frame.BorderSizePixel = 0
Instance.new("UICorner", frame)
local stroke = Instance.new("UIStroke", frame)
stroke.Color = Color3.fromRGB(27, 150, 72)

local uiScale = Instance.new("UIScale", frame)
uiScale.Scale = 1

local bg = Instance.new("ImageLabel", frame)
bg.Image = "rbxassetid://6803353442"
bg.BackgroundTransparency = 1
bg.ImageTransparency = 0.95
bg.ScaleType = Enum.ScaleType.Tile
bg.TileSize = UDim2.new(0, 10, 0, 10)
bg.Size = UDim2.new(1, 0, 1, 0)
bg.BorderSizePixel = 0

local title = Instance.new("TextLabel", frame)
title.Text = "Key System"
title.Font = Enum.Font.RobotoMono
title.TextSize = 30
title.BackgroundTransparency = 0.9
title.BackgroundColor3 = Color3.fromRGB(33, 132, 66)
title.TextColor3 = Color3.new(1, 1, 1)
title.Size = UDim2.new(1, 0, 0, 50)
Instance.new("UICorner", title)

local input = Instance.new("TextBox", frame)
input.PlaceholderText = "Enter your key here.."
input.Text = ""
input.Size = UDim2.new(0, 361, 0, 50)
input.Position = UDim2.new(0.084, 0, 0.5, 0)
input.TextColor3 = Color3.new(1, 1, 1)
input.BackgroundColor3 = Color3.fromRGB(33, 132, 66)
input.Font = Enum.Font.RobotoMono
input.TextSize = 20
input.BackgroundTransparency = 0.9
input.TextWrapped = false
Instance.new("UICorner", input)

local check = Instance.new("TextButton", frame)
check.Text = "Check Key"
check.Size = UDim2.new(0, 164, 0, 47)
check.Position = UDim2.new(0.07, 0, 0.82, 0)
check.BackgroundColor3 = Color3.fromRGB(33, 132, 66)
check.BackgroundTransparency = 0.8
check.TextColor3 = Color3.new(1, 1, 1)
check.Font = Enum.Font.RobotoMono
check.TextSize = 26
Instance.new("UICorner", check)
local cstroke = Instance.new("UIStroke", check)
cstroke.Color = Color3.fromRGB(33, 132, 66)

local discord = Instance.new("TextButton", frame)
discord.Text = "Join Discord"
discord.Size = UDim2.new(0, 164, 0, 47)
discord.Position = UDim2.new(0.53, 0, 0.82, 0)
discord.BackgroundColor3 = Color3.fromRGB(33, 132, 66)
discord.BackgroundTransparency = 0.8
discord.TextColor3 = Color3.new(1, 1, 1)
discord.Font = Enum.Font.RobotoMono
discord.TextSize = 26
Instance.new("UICorner", discord)
local dstroke = Instance.new("UIStroke", discord)
dstroke.Color = Color3.fromRGB(33, 132, 66)

local function playSound()
	local sound = Instance.new("Sound")
	sound.SoundId = soundId
	sound.Volume = 2
	sound.Parent = Workspace
	sound:Play()
	Debris:AddItem(sound, 5)
end

local function validate(key)
	local req = syn and syn.request or request or http_request
	if not req then return end
	local body = HttpService:JSONEncode({ hwid = hwid, key = key })
	local ok, res = pcall(function()
		return req({
			Url = api,
			Method = "POST",
			Headers = { ["Content-Type"] = "application/json" },
			Body = body
		})
	end)
	if ok and res and res.StatusCode == 200 then
		return HttpService:JSONDecode(res.Body)
	end
end

check.MouseButton1Click:Connect(function()
	local key = input.Text
	if key == "" then
		StarterGui:SetCore("SendNotification", {Title = "Empty Key", Text = "Please enter a key.", Duration = 3})
		return
	end
	StarterGui:SetCore("SendNotification", {Title = "Checking Key", Text = "Please wait...", Duration = 2})
	local result = validate(key)
	if result and result.valid then
		playSound()
		StarterGui:SetCore("SendNotification", {Title = "Access Granted", Text = "Welcome, "..player.Name, Duration = 4})
		frame:TweenPosition(UDim2.new(0.5, 0, -1, 0), "Out", "Back", 1, true)
		task.wait(1)
		gui:Destroy()
		blur:Destroy()
		local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/deividcomsono/Obsidian/refs/heads/main/Library.lua"))()
		local Window = Library:CreateWindow({Title = "Ink Game", Footer = "v2.9.3 - BETA", ToggleKeybind = Enum.KeyCode.RightControl, Center = true, AutoShow = true})
		local PlayerTab = Window:AddTab("Player", "user")
		local ExploitsTab = Window:AddTab("Exploits", "zap")
		local MovementGroup = PlayerTab:AddLeftGroup("Movement")
		local ExploitsGroup = ExploitsTab:AddRightGroup("Exploits")
		local conn
		MovementGroup:AddToggle("FaceCameraDirection", {
			Text = "Face Camera Direction",
			Default = false,
			Callback = function(state)
				local character = player.Character or player.CharacterAdded:Wait()
				local hrp = character:WaitForChild("HumanoidRootPart")
				local camera = workspace.CurrentCamera
				if state then
					conn = RunService.RenderStepped:Connect(function()
						local shiftCam = camera:FindFirstChildWhichIsA("ShiftLockController")
						local camToUse = shiftCam or camera
						local lookVector = camToUse.CFrame.LookVector
						local flatLook = Vector3.new(lookVector.X, 0, lookVector.Z)
						if flatLook.Magnitude > 0 then
							flatLook = flatLook.Unit
							hrp.CFrame = CFrame.new(hrp.Position, hrp.Position + flatLook)
						end
					end)
				else
					if conn then conn:Disconnect() conn = nil end
				end
			end
		})
		local infJumpConn
		MovementGroup:AddToggle("InfiniteJump", {
			Text = "Infinite Jump",
			Default = false,
			Callback = function(state)
				if state then
					_G.infJump = true
					infJumpConn = UserInputService.JumpRequest:Connect(function()
						if _G.infJump then
							local hum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
							if hum then hum:ChangeState(Enum.HumanoidStateType.Jumping) end
						end
					end)
				else
					_G.infJump = false
					if infJumpConn then infJumpConn:Disconnect() infJumpConn = nil end
				end
			end
		})
		ExploitsGroup:AddButton({Text = "Phantom Step", Func = function() player:SetAttribute("_EquippedPower", "PHANTOM STEP") end})
		ExploitsGroup:AddButton({Text = "Trickster", Func = function() player:SetAttribute("_EquippedPower", "TRICKSTER") end})
		ExploitsGroup:AddButton({Text = "Medic", Func = function() player:SetAttribute("_EquippedPower", "MEDIC") end})
		ExploitsGroup:AddButton({Text = "Skip Red Light Green Light", Func = function()
			local character = player.Character
			if character then character:PivotTo(CFrame.new(-130, 530, -1500)) end
		end})
		ExploitsGroup:AddButton({Text = "Finish Glass Game", Func = function()
			local character = player.Character
			if character then character:PivotTo(CFrame.new(-212.0, 521.0, -1534.9)) end
		end})
		local guardsExpanded = false
		local processedModels = {}
		local TARGET_SIZE = Vector3.new(4, 4, 4)
		local liveFolder = Workspace:FindFirstChild("Live")
		local function isPlayerCharacter(model)
			return Players:FindFirstChild(model.Name) ~= nil
		end
		local function processModel(model)
			if not model or not model:IsA("Model") then return end
			if isPlayerCharacter(model) then return end
			if processedModels[model] then return end
			local head = model:FindFirstChild("Head")
			if not head or not head:IsA("BasePart") then return end
			if not model:FindFirstChild("_HeadHighlighter") then
				local highlight = Instance.new("Highlight")
				highlight.Name = "_HeadHighlighter"
				highlight.Adornee = model
				highlight.FillColor = Color3.fromRGB(255, 80, 80)
				highlight.OutlineColor = Color3.new(1, 1, 1)
				highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
				highlight.Parent = model
			end
			processedModels[model] = head
		end
		RunService.Heartbeat:Connect(function()
			if not guardsExpanded then return end
			if not liveFolder then return end
			for _, model in ipairs(liveFolder:GetChildren()) do
				processModel(model)
			end
			for model, head in pairs(processedModels) do
				if model and model.Parent and head and head.Parent then
					if head.Size ~= TARGET_SIZE then
						head.Size = TARGET_SIZE
						head.CanCollide = false
					end
				else
					processedModels[model] = nil
				end
			end
		end)
		ExploitsGroup:AddToggle("ExpandGuardsHitbox", {
			Text = "Expand Guards Hitbox",
			Default = false,
			Callback = function(state)
				guardsExpanded = state
				if not state then
					for model, head in pairs(processedModels) do
						if head and head.Parent then
							pcall(function()
								head.Size = Vector3.new(1, 1, 1)
								head.CanCollide = true
							end)
						end
						local highlight = model:FindFirstChild("_HeadHighlighter")
						if highlight then highlight:Destroy() end
					end
					processedModels = {}
				end
			end
		})
		local autoTugEnabled = false
		local perfectQTE = { PerfectQTE = true }
		ExploitsGroup:AddToggle("TugOfWarAuto", {
			Text = "Tug of War Auto Pull",
			Default = false,
			Callback = function(state)
				autoTugEnabled = state
			end
		})
		RunService.Heartbeat:Connect(function()
			if autoTugEnabled then
				pcall(function()
					ReplicatedStorage.Remotes.TemporaryReachedBindable:FireServer(perfectQTE)
				end)
			end
		end)
		local RedLightActive = false
		local LastSafeCFrame = nil
		local hooked = false
		ExploitsGroup:AddToggle("RedLightGodMode", {
			Text = "Red Light God Mode",
			Default = false,
			Callback = function(state)
				RedLightActive = state
			end
		})
		ReplicatedStorage.Remotes.Effects.OnClientEvent:Connect(function(effect)
			if effect.EffectName == "TrafficLight" then
				local character = player.Character
				local hrp = character and character:FindFirstChild("HumanoidRootPart")
				if hrp then LastSafeCFrame = hrp.CFrame end
				if not effect.GreenLight and RedLightActive and LastSafeCFrame and not hooked then
					hooked = true
					local mt = getrawmetatable(game)
					local backup = mt.__namecall
					setreadonly(mt, false)
					mt.__namecall = newcclosure(function(self, ...)
						local method = getnamecallmethod()
						local args = {...}
						if self.Name == "rootCFrame" and method == "FireServer" then
							args[1] = LastSafeCFrame
							return backup(self, unpack(args))
						end
						return backup(self, ...)
					end)
					setreadonly(mt, true)
				end
			end
		end)
		ExploitsGroup:AddToggle("DalgonaAuto", {
			Text = "Dalgona Auto Complete",
			Default = false,
			Callback = function(state)
				if not state then return end
				for _, fn in ipairs(getreg()) do
					if typeof(fn) == "function" and islclosure(fn) then
						local info = debug.getinfo(fn)
						if info.name and info.name:lower():find("dalgona") then
							local upvalue = debug.getupvalue(fn, 31)
							if upvalue then
								setupvalue(fn, 31, 999999)
								break
							end
						end
					end
				end
			end
		})
		ExploitsGroup:AddToggle("GlassBridgeESP", {
			Text = "Glass Bridge ESP",
			Default = false,
			Callback = function(state)
				local bridge = Workspace:FindFirstChild("GlassBridge")
				local holder = bridge and bridge:FindFirstChild("GlassHolder")
				if not holder then return end
				for _, pair in ipairs(holder:GetChildren()) do
					for _, panel in ipairs(pair:GetChildren()) do
						local glass = panel:FindFirstChild("glasspart")
						if glass then
							if state then
								glass.Transparency = 0
								glass.Material = Enum.Material.Neon
								glass.Color = glass:GetAttribute("exploitingisevil") and Color3.fromRGB(248, 87, 87) or Color3.fromRGB(28, 235, 87)
							else
								glass.Transparency = 0.45
								glass.Material = Enum.Material.SmoothPlastic
								glass.Color = Color3.fromRGB(106, 106, 106)
							end
						end
					end
				end
			end
		})
		ExploitsGroup:AddToggle("MingleAuto", {
			Text = "Mingle Auto Minigame Solver",
			Default = false,
			Callback = function(state)
				local function onCharacter(char)
					local function checkRemote(child)
						if child:IsA("RemoteEvent") and child.Name == "RemoteForQTE" then
							task.spawn(function()
								while state and child.Parent do
									child:FireServer()
									task.wait(0.5)
								end
							end)
						end
					end
					char.ChildAdded:Connect(checkRemote)
					for _, v in ipairs(char:GetChildren()) do
						checkRemote(v)
					end
				end
				if player.Character then onCharacter(player.Character) end
				player.CharacterAdded:Connect(onCharacter)
			end
		})
	else
		playSound()
		StarterGui:SetCore("SendNotification", {Title = "Invalid Key", Text = "Try again or check your HWID.", Duration = 4})
	end
end)

discord.MouseButton1Click:Connect(function()
	setclipboard(link)
	StarterGui:SetCore("SendNotification", {Title = "Key Generator", Text = "Copied key link to clipboard.", Duration = 4})
end)

frame:TweenPosition(UDim2.new(0.5, 0, 0.5, 0), "Out", "Quad", 1, true)
