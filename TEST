local a = Instance.new("Animation")
a.AnimationId = "rbxassetid://116187503451999"
game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(a):Play()
  local l_Accessory_6 = Instance.new("Accessory");
                l_Accessory_6.Name = "#EmoteHolder_" .. math.random(1, 100000);
                l_Accessory_6.Parent = game.Players.LocalPlayer.Character;
                l_Accessory_6:SetAttribute("EmoteProperty", true);
                require(game.ReplicatedStorage.Emotes.VFX):MainFunction({
                    Character = game.Players.LocalPlayer.Character,
                    vfxName = "Divine Form", 
                    SpecificModule = game.ReplicatedStorage.Emotes.VFX, 
                    AnimSent = 116187503451999, 
                    RealBind = l_Accessory_6
                });
                task.delay(7.21, function() --[[ Line: 20663 ]]
                    -- upvalues: l_Accessory_6 (copy), game.Players.LocalPlayer.Character (ref)
                    if not l_Accessory_6 or not l_Accessory_6.Parent or not workspace.Live:FindFirstChild((tostring(game.Players.LocalPlayer.Character))) then
                        return;
                    else
                        local l_v129_2 = game.Players.LocalPlayer.Character;
                        local l_Folder_1 = game.ReplicatedStorage.Emotes.VFX.VfxMods.Evolved.vfx.Folder;
                        local l_Folder_2 = Instance.new("Folder");
                        l_Folder_2.Name = "AuraHolder";
                        l_Folder_2:SetAttribute("DivineForm", true);
                        l_Folder_2:SetAttribute("LimAura", true);
                        l_Folder_2:SetAttribute("EmoteEffect", true);
                        l_Folder_2.Parent = game.Players.LocalPlayer.Character;
                        task.spawn(function() --[[ Line: 20681 ]]
                            -- upvalues: l_Folder_1 (copy), l_v129_2 (copy), l_Folder_2 (copy)
                            for _, v3263 in pairs(l_Folder_1:GetChildren()) do
                                if v3263:IsA("BasePart") then
                                    local l_l_v129_2_FirstChild_0 = l_v129_2:FindFirstChild(v3263.Name);
                                    if l_l_v129_2_FirstChild_0 then
                                        local v3265 = v3263:Clone();
                                        task.delay(244, function() --[[ Line: 20687 ]]
                                            -- upvalues: v3265 (copy)
                                            if v3265 and v3265.Parent then
                                                v3265:Destroy();
                                            end;
                                        end);
                                        v3265:SetAttribute("LimAura", true);
                                        v3265.Transparency = 1;
                                        v3265.Massless = true;
                                        local l_Weld_25 = Instance.new("Weld");
                                        l_Weld_25.Part0 = l_l_v129_2_FirstChild_0;
                                        l_Weld_25.Part1 = v3265;
                                        l_Weld_25.Parent = v3265;
                                        v3265.Name = math.random(1, 1000);
                                        v3265.Parent = l_Folder_2;
                                        for _, v3268 in pairs(v3265:GetDescendants()) do
                                            if v3268:IsA("ParticleEmitter") or v3268:IsA("Beam") then
                                                v3268:SetAttribute("LimitedAura", true);
                                                task.delay(240, function() --[[ Line: 20704 ]]
                                                    -- upvalues: v3268 (copy)
                                                    v3268.Enabled = false;
                                                end);
                                            end;
                                        end;
                                    end;
                                end;
                            end;
                        end);
                        return;
                    end;
                end);
